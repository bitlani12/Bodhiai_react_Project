{
  "_args": [
    [
      {
        "raw": "react-sticky",
        "scope": null,
        "escapedName": "react-sticky",
        "name": "react-sticky",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\backupproject"
    ]
  ],
  "_from": "react-sticky@latest",
  "_id": "react-sticky@6.0.3",
  "_inCache": true,
  "_location": "/react-sticky",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-sticky_6.0.3_1529936327328_0.7197970830253513"
  },
  "_npmUser": {
    "name": "dbarbalato",
    "email": "dbarbalato@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-sticky",
    "scope": null,
    "escapedName": "react-sticky",
    "name": "react-sticky",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-sticky/-/react-sticky-6.0.3.tgz",
  "_shasum": "7a18b643e1863da113d7f7036118d2a75d9ecde4",
  "_shrinkwrap": null,
  "_spec": "react-sticky",
  "_where": "D:\\backupproject",
  "author": {
    "name": "Captivation Software"
  },
  "bugs": {
    "url": "https://github.com/captivationsoftware/react-sticky/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.8",
    "raf": "^3.3.0"
  },
  "description": "Sticky component for React",
  "devDependencies": {
    "babel-cli": "^6.23.1",
    "babel-core": "^6.23.1",
    "babel-loader": "^6.2.10",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "chai": "^4",
    "enzyme": "^2.8.2",
    "jsdom": "8.0.4",
    "mocha": "^5",
    "react": "^15.5.4",
    "react-dom": "^15.5.4",
    "react-router-dom": "^4.2.2",
    "react-test-renderer": "^15.5.4",
    "rimraf": "^2.5.2",
    "webpack": "^3.11.0",
    "webpack-dev-server": "^2.11.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-LNH4UJlRatOqo29/VHxDZOf6fwbgfgcHO4mkEFvrie5FuaZCSTGtug5R8NGqJ0kSnX8gHw8qZN37FcvnFBJpTQ==",
    "shasum": "7a18b643e1863da113d7f7036118d2a75d9ecde4",
    "tarball": "https://registry.npmjs.org/react-sticky/-/react-sticky-6.0.3.tgz",
    "fileCount": 12,
    "unpackedSize": 220772,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbMPnHCRA9TVsSAnZWagAAJWIP/3kK+9npgsL0qhbzHKnL\nLLz5/wlA9CN/tLlAQ5WGG7hD5q/w49Okole26QB6HHPL/Kfkz+i1ojLnUX19\nGCbC+YSWzoKqZWeEdR0815nKsywur0X03hKmC0fU/ySlY4z/PFcmN0UoBo6s\n+/+mrYCKVRk8BJe6yTdjct4HGMVlMwJkpBWTWMhLomFXX0xyPol4FEI3Cg3V\ne1UwDPhoBTpRHmw+SnEuh4NgIFx1SBWtX9qycJhsM6glzlTja5vebqZBRIJ1\nMLf8HFYHABZB8nW7tX40ro0MkK1wCH/sh93PNPFTnLM4M4IElQd8vVqpQob8\nnEWrxbdcS5cf0fS+iNrpR+Mbalnascbr6bDyknZUxv7xRaUab46Hxx+M40d2\nZGBoc6ayVU6T8lTxkRQlyUwyvmND9yDS3/ktbEtRHB1U4Qi6IaRXsucwmqt6\nJ2I1kR55XzPYXmSVKOG3OlDZzkIcgMmdFHgZ8KypjnWayvQVfSTJUK5JwUv4\nTjX+zT/8swp92oB3S1abrxdXdS32m1bf+spU9lmPGfFVcYk24adhBIVBALbY\noyX8Qiusi/NyiJNeu3xmdgU5mDvm917eQ1kszw0gVCcJGPrNvwFloEhPKp/W\na2sT1chyacq688luFF3NHiS5T/TBVFekHbGYhqqmJFjdgfk5r101BTKPh64U\nQiS4\r\n=WlMg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "87e1f7de2ce4261a521d8f8caf1995166f8b3e18",
  "homepage": "https://github.com/captivationsoftware/react-sticky",
  "keywords": [
    "react-component",
    "React",
    "Sticky"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "dbarbalato",
      "email": "dbarbalato@gmail.com"
    }
  ],
  "name": "react-sticky",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15",
    "react-dom": ">=15"
  },
  "readme": "# react-sticky [![Build Status](https://travis-ci.org/captivationsoftware/react-sticky.svg?branch=master)](https://travis-ci.org/captivationsoftware/react-sticky)\n\nMake your React components sticky!\n\n#### Demos\n\n* [Basic](http://react-sticky.netlify.com/#/basic)\n* [Relative](http://react-sticky.netlify.com/#/relative)\n* [Stacked](http://react-sticky.netlify.com/#/stacked)\n\n#### Version 6.x Highlights\n\n* Completely redesigned to support sticky behavior via higher-order component, giving you ultimate control of implementation details\n* Features a minimal yet efficient API\n* Drops support for versions of React < 15.3. If you are using an earlier version of React, continue to use the 5.x series\n\n#### CSS\nThere's a CSS alternative to `react-sticky`: the `position: sticky` feature. However it currently does not have [full browser support](https://caniuse.com/#feat=css-sticky), specifically a lack of IE11 support and some bugs with table elements. Before using `react-sticky`, check to see if the browser support and restrictions prevent you from using `position: sticky`, as CSS will always be faster and more durable than a JS implementation.\n```css\nposition: -webkit-sticky;\nposition: sticky;\ntop: 0;\n```\n\n## Installation\n\n```sh\nnpm install react-sticky\n```\n\n## Overview & Basic Example\n\nThe goal of `react-sticky` is make it easier for developers to build UIs that have sticky elements. Some examples include a sticky navbar, or a two-column layout where the left side sticks while the right side scrolls.\n\n`react-sticky` works by calculating the position of a `<Sticky>` component relative to a `<StickyContainer>` component. If it would be outside the viewport, the styles required to affix it to the top of the screen are passed as an argument to a render callback, a function passed as a child.\n\n```js\n<StickyContainer>\n  <Sticky>{({ style }) => <h1 style={style}>Sticky element</h1>}</Sticky>\n</StickyContainer>\n```\n\nThe majority of use cases will only need the style to pass to the DOM, but some other properties are passed for advanced use cases:\n\n* `style` _(object)_ - modifiable style attributes to optionally be passed to the element returned by this function. For many uses, this will be the only attribute needed.\n* `isSticky` _(boolean)_ - is the element sticky as a result of the current event?\n* `wasSticky` _(boolean)_ - was the element sticky prior to the current event?\n* `distanceFromTop` _(number)_ - number of pixels from the top of the `Sticky` to the nearest `StickyContainer`'s top\n* `distanceFromBottom` _(number)_ - number of pixels from the bottom of the `Sticky` to the nearest `StickyContainer`'s bottom\n* `calculatedHeight` _(number)_ - height of the element returned by this function\n\nThe `Sticky`'s child function will be called when events occur in the parent `StickyContainer`,\nand will serve as the callback to apply your own logic and customizations, with sane `style` attributes\nto get you up and running quickly.\n\n### Full Example\n\nHere's an example of all of those pieces together:\n\napp.js\n\n```js\nimport React from 'react';\nimport { StickyContainer, Sticky } from 'react-sticky';\n// ...\n\nclass App extends React.Component {\n  render() {\n    return (\n      <StickyContainer>\n        {/* Other elements can be in between `StickyContainer` and `Sticky`,\n        but certain styles can break the positioning logic used. */}\n        <Sticky>\n          {({\n            style,\n\n            // the following are also available but unused in this example\n            isSticky,\n            wasSticky,\n            distanceFromTop,\n            distanceFromBottom,\n            calculatedHeight\n          }) => (\n            <header style={style}>\n              {/* ... */}\n            </header>\n          )}\n        </Sticky>\n        {/* ... */}\n      </StickyContainer>\n    );\n  },\n};\n```\n\nWhen the \"stickiness\" becomes activated, the arguments to the sticky function\nare modified. Similarly, when deactivated, the arguments will update accordingly.\n\n### `<StickyContainer />` Props\n\n`<StickyContainer />` supports all valid `<div />` props.\n\n### `<Sticky />` Props\n\n#### relative _(default: false)_\n\nSet `relative` to `true` if the `<Sticky />` element will be rendered within\nan overflowing `<StickyContainer />` (e.g. `style={{ overflowY: 'auto' }}`) and you want\nthe `<Sticky />` behavior to react to events only within that container.\n\nWhen in `relative` mode, `window` events will not trigger sticky state changes. Only scrolling\nwithin the nearest `StickyContainer` can trigger sticky state changes.\n\n#### topOffset _(default: 0)_\n\nSticky state will be triggered when the top of the element is `topOffset` pixels from the top of the closest `<StickyContainer />`. Positive numbers give the impression of a lazy sticky state, whereas negative numbers are more eager in their attachment.\n\napp.js\n\n```js\n<StickyContainer>\n  ...\n  <Sticky topOffset={80}>\n    { props => (...) }\n  </Sticky>\n  ...\n</StickyContainer>\n```\n\nThe above would result in an element that becomes sticky once its top is greater than or equal to 80px away from the top of the `<StickyContainer />`.\n\n#### bottomOffset _(default: 0)_\n\nSticky state will be triggered when the bottom of the element is `bottomOffset` pixels from the bottom of the closest `<StickyContainer />`.\n\napp.js\n\n```js\n<StickyContainer>\n  ...\n  <Sticky bottomOffset={80}>\n    { props => (...) }\n  </Sticky>\n  ...\n</StickyContainer>\n```\n\nThe above would result in an element that ceases to be sticky once its bottom is 80px away from the bottom of the `<StickyContainer />`.\n\n#### disableCompensation _(default: false)_\n\nSet `disableCompensation` to `true` if you do not want your `<Sticky />` to apply padding to\na hidden placeholder `<div />` to correct \"jumpiness\" as attachment changes from `position:fixed`\nand back.\n\napp.js\n\n```js\n<StickyContainer>\n  ...\n  <Sticky disableCompensation>\n    { props => (...) }\n  </Sticky>\n  ...\n</StickyContainer>\n```\n\n#### disableHardwareAcceleration _(default: false)_\n\nWhen `disableHardwareAcceleration` is set to `true`, the `<Sticky />` element will not use hardware acceleration (e.g. `transform: translateZ(0)`). This setting is not recommended as it negatively impacts\nthe mobile experience, and can usually be avoided by improving the structure of your DOM.\n\napp.js\n\n```js\n<StickyContainer>\n  ...\n  <Sticky disableHardwareAcceleration>\n    { props => (...) }\n  </Sticky>\n  ...\n</StickyContainer>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/captivationsoftware/react-sticky.git"
  },
  "scripts": {
    "clean": "rimraf lib",
    "compile": "babel src --loose --out-dir lib",
    "demos:build": "NODE_ENV=production webpack -p",
    "demos:start": "webpack-dev-server --watch",
    "prepare": "npm run clean && npm run compile",
    "prepublish": "npm run prepare",
    "test": "mocha test/setup.js test/spec/*.js"
  },
  "version": "6.0.3"
}
