{
  "_args": [
    [
      {
        "raw": "react-media",
        "scope": null,
        "escapedName": "react-media",
        "name": "react-media",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\template"
    ]
  ],
  "_from": "react-media@latest",
  "_id": "react-media@1.8.0",
  "_inCache": true,
  "_location": "/react-media",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-media_1.8.0_1518114904405_0.38198688128872016"
  },
  "_npmUser": {
    "name": "mjackson",
    "email": "npm@mjackson.me"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-media",
    "scope": null,
    "escapedName": "react-media",
    "name": "react-media",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-media/-/react-media-1.8.0.tgz",
  "_shasum": "b86d6d62313f95d53af7d06e23d4f49adfb131d3",
  "_shrinkwrap": null,
  "_spec": "react-media",
  "_where": "D:\\template",
  "author": {
    "name": "Michael Jackson"
  },
  "bugs": {
    "url": "https://github.com/ReactTraining/react-media/issues"
  },
  "dependencies": {
    "invariant": "^2.2.2",
    "json2mq": "^0.2.0",
    "prop-types": "^15.5.10"
  },
  "description": "CSS media queries for React",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^7.0.0",
    "babel-plugin-dev-expression": "^0.2.1",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.12",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-1": "^6.5.0",
    "eslint": "^3.2.2",
    "eslint-plugin-import": "^2.0.0",
    "eslint-plugin-jest": "^20.0.3",
    "eslint-plugin-react": "^6.0.0",
    "gzip-size": "^3.0.0",
    "jest": "^20.0.4",
    "pascal-case": "^2.0.1",
    "pretty-bytes": "^4.0.2",
    "react": "^15.4.1 || ^0.14.7",
    "react-dom": "^15.3.0 || ^0.14.7",
    "rollup": "^0.53.4",
    "rollup-plugin-babel": "^3.0.3",
    "rollup-plugin-commonjs": "^8.2.6",
    "rollup-plugin-node-resolve": "^3.0.2",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^2.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-XcfqkDQj5/hmJod/kXUAZljJyMVkWrBWOkzwynAR8BXOGlbFLGBwezM0jQHtp2BrSymhf14/XrQrb3gGBnGK4g==",
    "shasum": "b86d6d62313f95d53af7d06e23d4f49adfb131d3",
    "tarball": "https://registry.npmjs.org/react-media/-/react-media-1.8.0.tgz",
    "fileCount": 8,
    "unpackedSize": 123217
  },
  "files": [
    "cjs",
    "esm",
    "umd"
  ],
  "gitHead": "678f78cec7692b750480c99c36829012e2816456",
  "homepage": "https://github.com/ReactTraining/react-media#readme",
  "keywords": [
    "react",
    "media",
    "media query",
    "query",
    "css",
    "responsive"
  ],
  "license": "MIT",
  "main": "cjs/react-media.js",
  "maintainers": [
    {
      "name": "mjackson",
      "email": "mjijackson@gmail.com"
    }
  ],
  "module": "esm/react-media.js",
  "name": "react-media",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15 || ^0.14.7"
  },
  "readme": "# react-media [![Travis][build-badge]][build] [![npm package][npm-badge]][npm]\n\n[build-badge]: https://img.shields.io/travis/ReactTraining/react-media/master.svg?style=flat-square\n[build]: https://travis-ci.org/ReactTraining/react-media\n[npm-badge]: https://img.shields.io/npm/v/react-media.svg?style=flat-square\n[npm]: https://www.npmjs.org/package/react-media\n\n[`react-media`](https://www.npmjs.com/package/react-media) is a CSS media query component for React.\n\nA `<Media>` component listens for matches to a [CSS media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries) and renders stuff based on whether the query matches or not.\n\n## Installation\n\nUsing npm:\n\n    $ npm install --save react-media\n\nThen, use as you would anything else:\n\n```js\n// using ES modules\nimport Media from \"react-media\";\n\n// using CommonJS modules\nvar Media = require(\"react-media\");\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/react-media/umd/react-media.min.js\"></script>\n```\n\nYou can find the library on `window.ReactMedia`.\n\n## Usage\n\nRender a `<Media>` component with a `query` prop whose value is a valid [CSS media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries). The `children` prop should be a function whose only argument will be a boolean flag that indicates whether the media query matches or not.\n\n```jsx\nimport React from \"react\";\nimport Media from \"react-media\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media query=\"(max-width: 599px)\">\n          {matches =>\n            matches ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n      </div>\n    );\n  }\n}\n```\n\nIf you render a `<Media>` component on the server, it always matches.\n\nIf you use a regular React element as `children` (i.e. `<Media><SomethingHere/></Media>`) it will be rendered if the query matches. However, _you may end up creating a bunch of elements that won't ever actually be rendered to the page_ (i.e. you'll do a lot of unnecessary `createElement`s on each `render`). Thus, a `children` **function** (i.e. `<Media>{matches => ...}</Media>`) is the preferred API. Then you can decide in the callback which elements to create based on the result of the query.\n\nFor the common case of \"only render something when the media query matches\", you can use a `render` prop that is only called if the query matches.\n\n```jsx\nimport React from \"react\";\nimport Media from \"react-media\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media\n          query=\"(max-width: 599px)\"\n          render={() => <p>The document is less than 600px wide.</p>}\n        />\n      </div>\n    );\n  }\n}\n```\n\nThe `render` prop is never called if the query does not match.\n\n`<Media query>` also accepts an object, similar to [React's built-in support for inline style objects](https://facebook.github.io/react/tips/inline-styles.html) in e.g. `<div style>`. These objects are converted to CSS media queries via [json2mq](https://github.com/akiran/json2mq/blob/master/README.md#usage).\n\n```jsx\nimport React from \"react\";\nimport Media from \"react-media\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media query={{ maxWidth: 599 }}>\n          {matches =>\n            matches ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n      </div>\n    );\n  }\n}\n```\n\nKeys of media query objects are camel-cased and numeric values automatically get the `px` suffix. See the [json2mq docs](https://github.com/akiran/json2mq/blob/master/README.md#usage) for more examples of queries you can construct using objects.\n\nAn optional `targetWindow` prop can be specified if you want the `query` to be evaluated against a different window object than the one the code is running in. This can be useful for example if you are rendering part of your component tree to an iframe or [a popup window](https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202).\n\nIf you're curious about how react-media differs from [react-responsive](https://github.com/contra/react-responsive), please see [this comment](https://github.com/ReactTraining/react-media/issues/70#issuecomment-347774260).\n\nEnjoy!\n\n## About\n\n`react-media` is developed and maintained by [React Training](https://reacttraining.com). If you're interested in learning more about what React can do for your company, please [get in touch](mailto:hello@reacttraining.com)!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ReactTraining/react-media.git"
  },
  "scripts": {
    "build": "node ./scripts/build.js",
    "clean": "git clean -fdX .",
    "lint": "eslint modules",
    "prepublishOnly": "node ./scripts/build.js",
    "test": "jest"
  },
  "unpkg": "umd/react-media.js",
  "version": "1.8.0"
}
